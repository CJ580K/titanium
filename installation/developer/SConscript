#!/usr/bin/env python
import os.path as p, futils
from app import App
Import('build')

def package_sdk(target, source, env):
	print "Packaging Titanium Developer (the SDK)..."
	cwd = build.cwd()
	sdk = App(
		build,
		shortname='titanium-developer',
		fullname='Titanium Developer', 
		id='com.titaniumapp.developer',
		version=build.version,
		guid='CC835453-7FF6-48A3-A64F-DB1CCB0F28D7',
		image='images/default_app_logo.png',
		publisher='Appcelerator, Inc',
		url='http://www.titaniumapp.com')

	# Titanium Developer should depend on all installed modules
	# so that all modules will be installed when it first starts.
	# modules = []
	# sdk.set_modules(modules)

	# Create the basic application shell
	sdk.stage(build.sdk_build_dir, src_resources=p.join(cwd, 'Resources'))

	# The SDK installer application is staged.
	# -- so now we do pre-package processing
	to_copy = ['tiapp.xml']
	for item in to_copy:
		futils.CopyToDir(p.join(cwd, item), sdk.contents)
	
	# Copy in common js files into all applications
	common_js = p.join(build.titanium_source_dir, 'installation', 'common', 'js')
	futils.CopyTree(common_js, p.join(sdk.contents, 'Resources', 'js'))

	# Copy in appinstaller files particular to Titanium developer
	appinstaller = p.join(cwd, 'appinstaller')
	appinstaller_common = p.join(cwd, '..', 'appinstaller')
	appinstaller_target = p.join(sdk.contents, 'appinstaller')
	futils.CopyTree(common_js, p.join(appinstaller_target, 'Resources', 'js'))
	futils.CopyTree(appinstaller_common, appinstaller_target, exclude=['SConscript'])
	futils.CopyTree(appinstaller, appinstaller_target, exclude=['README'])

	# Don't mark this application as installed, because we want
	# the appinstaller to run when it is first executed
	#futils.Touch(p.join(sdk.contents, '.installed'))

	if not build.nopackage:
		sdk.package(
			out_dir=build.dist_dir,

			# osx options
			app_name="Titanium Developer",
			vol_name="Titanium",
			dmg_name='titanium-sdk-' + build.version,
			icns_file=p.join(cwd, 'osx', 'VolumeIcon.icns'),
			ds_store_file=p.join(cwd, 'osx', 'installer_DS_Store'),
			ds_store_extras=[p.join(cwd, 'osx', 'background.jpg')])

build.env.Append(BUILDERS = {'PackageSDK' : Builder(action=package_sdk)})
sdk_target = build.env.PackageSDK("#dummy-target", [])
build.mark_dist_target(sdk_target)

AlwaysBuild(sdk_target) # incremental builder doesn't work
Alias('sdk', sdk_target)
Alias('developer', sdk_target)
