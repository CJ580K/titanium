import os.path as p, shutil, os
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

kboot = p.join(build.dir, 'kboot')
app_dir = p.join(build.dir, name)
runtime = p.join(app_dir, 'runtime');
modules_dir = p.join(app_dir, 'modules');

third_party += ['libcurl', 'libicu']

if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

for d in [app_dir, runtime, modules_dir]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, 'lib' + lib+ '.so')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s/%s/lib/*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		shutil.copy(d, runtime)

# Gather all module libs
for m in modules:
	mlib = p.join('%s/lib%smodule.so' % (build.dir, m))
	out_dir = '%s/%s' % (modules_dir, m)
	os.makedirs(out_dir)
	shutil.copy(mlib, out_dir)

shutil.copy(kboot, p.join(app_dir, name))
dir_util.copy_tree(".", app_dir, preserve_symlinks=True)
out_file = open(p.join(app_dir, 'manifest'), 'w')
out_file.write(manifest_text)
out_file.close()

# Copy support files
developer = p.join(build.titanium_source_dir, "installation", "developer")
dest = p.join(app_dir, "developer")
dir_util.copy_tree(developer, dest, preserve_symlinks=True)

# Remove uneeded files
to_remove = []
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('SConscript')
		  or file.startswith('.')):
			os.remove(p.join(app_dir, walk[0], file))
