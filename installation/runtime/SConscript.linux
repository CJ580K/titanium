#!/usr/bin/env python

import os.path as p, shutil, os, tarfile
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

kboot = p.join(build.dir, 'kboot')
app_dir = p.join(build.dir, name)
runtime = p.join(app_dir, 'runtime');
modules_dir = p.join(app_dir, 'modules');
jsfiles = p.join(build.titanium_source_dir, 'installation', 'common', 'js')

third_party += ['libcurl', 'libicu']

if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

for d in [app_dir, runtime, modules_dir]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, 'lib' + lib+ '.so')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s/%s/lib/*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		shutil.copy(d, runtime)

# Gather all module libs
for m in modules.keys():
	module_dir = p.join(build.titanium_source_dir, 'modules', modules[m])
	if not p.exists(module_dir):
		module_dir = p.join(build.kroll_source_dir, 'modules', modules[m])
	
	mlib = p.join('%s/lib%smodule.so' % (build.dir, m))
	## we'll have to make this pluggable at some point
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.js' % m)
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.py' % m)
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.rb' % m)
	
	out_dir = '%s/%s' % (modules_dir, m)
	os.makedirs(out_dir)
	
	if p.exists(mlib):
		shutil.copy(mlib, out_dir)
	
	app_resources = p.join(module_dir, 'AppResources')
	if p.exists(app_resources):
		dir_util.copy_tree(app_resources, p.join(modules_dir, m, 'AppResources'))

# prevent the app installer from running
f = open(p.join(app_dir, '.installed'), 'w')
f.write('installed')
f.close()

shutil.copy(kboot, p.join(app_dir, name))
dir_util.copy_tree("Resources", p.join(app_dir, "Resources"), preserve_symlinks=True)
shutil.copy("tiapp.xml", p.join(app_dir, "tiapp.xml"))

shutil.copy(p.join(build.titanium_source_dir,'installation','runtime','manifest'), p.join(app_dir,'manifest'))
shutil.copy(p.join(build.titanium_source_dir,'installation','runtime','install'), p.join(app_dir,'install'))
dir_util.copy_tree(jsfiles, p.join(app_dir,'Resources','js'), preserve_symlinks=True)

# Copy developer application
developer = p.join(build.titanium_source_dir, "installation", "developer")
dest = p.join(app_dir, "developer")
dir_util.copy_tree(developer, dest, preserve_symlinks=True)
dir_util.copy_tree(jsfiles, p.join(dest,'Resources','js'), preserve_symlinks=True)

# copy the app installer application
appinstaller = p.join(build.titanium_source_dir, "installation", "app_installer")
dest = p.join(app_dir, 'appinstaller')
dir_util.copy_tree(appinstaller, dest, preserve_symlinks=True)
dir_util.copy_tree(jsfiles, p.join(dest,'Resources','js'), preserve_symlinks=True)


# Remove uneeded files
to_remove = []
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('.')):
			os.remove(p.join(app_dir, walk[0], file))

out = open(app_dir + '.bin', 'wb')
extractor = open('linux/self_extracting.sh', 'r').read()
extractor = extractor.replace('APPNAME', name)
out.write(extractor)

tar = tarfile.open(None, 'w:gz', out)
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for file in walk[2]:
		file = p.join(walk[0], file)
		arcname = file.replace(app_dir + '/', "")
		tar.add(file, arcname)
tar.close()
out.close()
