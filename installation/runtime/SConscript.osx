import os.path as p, shutil, os
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

class Bundler(object): 
	def __init__(self, name, dest, tiapp, resources, lprojs):
		self.basedir = p.join(dest,'%s.app' % name)
		if p.isdir(self.basedir):
		  dir_util.remove_tree(self.basedir)
		self.contents = p.join(self.basedir,'Contents')
		macos = p.join(self.contents,'MacOS')
		self.resources = p.join(self.contents,'Resources')
		self.lproj = p.join(self.resources,'English.lproj')
		for d in [self.basedir,self.contents,macos,self.resources,self.lproj]:
			os.makedirs(d)
		if tiapp:
			shutil.copy(tiapp, self.contents)
		kboot = p.join(build.dir, 'kboot')
		shutil.copy(kboot, p.join(macos,name))
		out_file = open(p.join(self.contents, 'manifest'), 'w')
		out_file.write(manifest_text)
		out_file.close()
		icns = p.join(build.titanium_support_dir, 'titanium.icns')
		shutil.copy(icns, self.lproj)
		if resources:
			dir_util.copy_tree(resources, self.resources, preserve_symlinks=True)
		if lprojs:
			dir_util.copy_tree(lprojs, self.lproj, preserve_symlinks=False)
		plist = open(p.join(build.titanium_support_dir, 'Info.plist')).read()
		plist = plist.replace('APPNAME', name)
		plist = plist.replace('APPICON', 'titanium.icns')
		plist = plist.replace('APPID', appid)
		plist = plist.replace('APPNIB', 'MainMenu')
		plist = plist.replace('APPVER', version)
		out_file = open(p.join(self.contents, 'Info.plist'), 'w')
		out_file.write(plist)
		out_file.close()
		out_file = open(p.join(self.contents, 'manifest'), 'w')
		out_file.write(manifest_text)
		out_file.close()		

bundle = Bundler(name,build.dir,'tiapp.xml','resources',None)
runtime = p.join(bundle.contents, 'runtime');
modules_dir = p.join(bundle.contents, 'modules');
for d in [runtime,modules_dir]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, 'lib' + lib+ '.dylib')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s/%s/*.framework' % (build.third_party, tp)
	for d in glob.glob(pattern):
		dest = runtime + '/' + p.basename(d)
		shutil.copytree(d, dest, symlinks=True)
	pattern = '%s/%s/lib/*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		shutil.copy(d, runtime)

# Gather all module libs
for m in modules:
	mlib = p.join('%s/lib%smodule.dylib' % (build.dir, m))
	out_dir = '%s/%s' % (modules_dir, m)
	os.makedirs(out_dir)
	shutil.copy(mlib, out_dir)

menu_nib = p.join(build.dir, 'modules', 'ti.UI', 'MainMenu.nib')
shutil.copy(menu_nib, bundle.lproj)

# Remove uneeded files
files = os.walk(bundle.basedir)
for walk in os.walk(bundle.basedir):
	for dir in walk[1]:
		if dir == 'JavaScriptGlue.framework':
			dir_util.remove_tree(p.join(bundle.basedir, walk[0], dir))
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('SConscript')
		  or file.startswith('.')):
			os.remove(p.join(bundle.basedir, walk[0], file))

# copy the developer product
developer = p.join(bundle.contents,'developer')
os.makedirs(developer)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','developer'), developer, preserve_symlinks=True)

# copy the network installer
installer = p.join(bundle.contents,'installer')
os.makedirs(installer)
netinstaller = p.join(build.dir, 'net_installer')
bundle = Bundler('Installer App',installer,None,None,None)
shutil.copy(p.join(netinstaller,'Info.plist'),bundle.basedir)
shutil.copy(p.join(netinstaller,'MainMenu.nib'),bundle.basedir)

