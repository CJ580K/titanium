import os.path as p, shutil, os
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

kboot = p.join(build.dir, 'kboot')
app_dir = p.join(build.dir, '%s.app' % name)
contents = p.join(app_dir, 'Contents');
macos = p.join(contents, 'MacOS');
resources = p.join(contents, 'Resources');
runtime = p.join(contents, 'runtime');
modules_dir = p.join(contents, 'modules');
lproj = p.join(resources, 'English.lproj');

if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

for d in [app_dir, contents, macos, resources, runtime, modules_dir, lproj]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, 'lib' + lib+ '.dylib')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s/%s/*.framework' % (build.third_party, tp)
	for d in glob.glob(pattern):
		dest = runtime + '/' + p.basename(d)
		shutil.copytree(d, dest, symlinks=True)
	pattern = '%s/%s/lib/*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		shutil.copy(d, runtime)

# Gather all module libs
for m in modules:
	mlib = p.join('%s/lib%smodule.dylib' % (build.dir, m))
	out_dir = '%s/%s' % (modules_dir, m)
	os.makedirs(out_dir)
	shutil.copy(mlib, out_dir)

shutil.copy(kboot, p.join(macos, name))
dir_util.copy_tree(".", contents, preserve_symlinks=True)
out_file = open(p.join(contents, 'manifest'), 'w')
out_file.write(manifest_text)
out_file.close()

# Copy support files
icns = p.join(build.titanium_support_dir, 'titanium.icns')
shutil.copy(icns, lproj)
menu_nib = p.join(build.dir, 'modules', 'ti.UI', 'MainMenu.nib')
shutil.copy(menu_nib, lproj)
developer = p.join(build.titanium_source_dir, "installation", "developer")
dir_util.copy_tree(developer, contents, preserve_symlinks=True)

plist = open(p.join(build.titanium_support_dir, 'Info.plist')).read()
plist = plist.replace('APPNAME', name)
plist = plist.replace('APPICON', 'titanium.icns')
plist = plist.replace('APPID', appid)
plist = plist.replace('APPNIB', 'MainMenu')
plist = plist.replace('APPVER', version)
out_file = open(p.join(contents, 'Info.plist'), 'w')
out_file.write(plist)
out_file.close()

# Remove uneeded files
to_remove = []
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for dir in walk[1]:
		if dir == 'JavaScriptGlue.framework':
			dir_util.remove_tree(p.join(app_dir, walk[0], dir))
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('SConscript')
		  or file.startswith('.')):
			os.remove(p.join(app_dir, walk[0], file))
