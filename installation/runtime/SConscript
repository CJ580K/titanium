#!/usr/bin/env python
import os.path as p, futils
from app import App
Import('build')

def package_sdk(target, source, env):
	print "Packaging the Titanium SDK..."
	cwd = build.cwd()
	sdk = App(
		build,
		shortname='titanium-sdk',
		fullname='Titanium SDK Installer', 
		id='com.titaniumapp.sdk.installer',
		version=build.version,
		guid='7F7FA377-E695-4280-9F1F-96126F3D2C2A')
	
	modules = ['runtime', 'javascript', 'tiapp', 'tifilesystem', 'tiplatform', 'tiprocess', 'tidesktop', 'api', 'tiui', 'tinetwork', 'tianalytics']
	sdk.set_modules(modules)

	# Create the basic application shell
	sdk.stage(build.sdk_build_dir, src_resources=p.join(cwd, 'Resources'))
	
	# The SDK installer application is staged.
	# -- so now we do pre-package processing
	to_copy = ['tiapp.xml', 'install']
	for item in to_copy:
		futils.CopyToDir(p.join(cwd, item), sdk.contents)
	
	# Copy developer and appinstaller applications
	devtool = p.join(build.titanium_source_dir, "installation", "developer")
	devtool_target = p.join(sdk.contents, 'developer')
	futils.CopyTree(devtool, devtool_target)

	# Copy common js files into all applications
	common_js = p.join(build.titanium_source_dir, 'installation', 'common', 'js')
	futils.CopyTree(common_js, p.join(sdk.contents, 'Resources', 'js'))
	futils.CopyTree(common_js, p.join(devtool_target, 'Resources', 'js'))

	# app installer now stages to runtime dir
	#appinstaller = p.join(build.titanium_source_dir, "installation", "app_installer")
	#appinstaller_target = p.join(sdk.contents, 'appinstaller')
	#futils.CopyTree(appinstaller, appinstaller_target)
	#futils.CopyTree(common_js, p.join(appinstaller_target, 'Resources', 'js'))
	#futils.Touch(p.join(appinstaller_target, '.installed'))

	# Mark all applications as installed
	futils.Touch(p.join(sdk.contents, '.installed'))
	futils.Touch(p.join(devtool_target, '.installed'))

	sdk.package(
		out_dir=build.dist_dir,

		# osx options
		app_name="Install Titanium SDK",
		vol_name="Titanium",
		dmg_name='titanium-sdk-' + build.version,
		icns_file=p.join(cwd, 'osx', 'VolumeIcon.icns'),
		ds_store_file=p.join(cwd, 'osx', 'installer_DS_Store'),
		ds_store_extras=[p.join(cwd, 'osx', 'background.jpg')])

build.env.Append(BUILDERS = {'PackageSDK' : Builder(action=package_sdk)})
sdk_target = build.env.PackageSDK("#dummy-target", [])
build.mark_dist_target(sdk_target)

AlwaysBuild(sdk_target) # incremental builder doesn't work
Alias('sdk', sdk_target)
