#!/usr/bin/env python

import os.path as p, shutil, os
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

kboot = p.join(build.dir, 'kboot.exe')
app_dir = p.join(build.dir, name)
runtime = p.join(app_dir, 'runtime')
modules_dir = p.join(app_dir, 'modules')
resources_dir = p.join(app_dir,'resources')

#third_party += ['libcurl']

if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

for d in [app_dir, runtime, modules_dir]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, lib+ '.dll')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s/%s/bin/*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		shutil.copy(d, runtime)

# Gather all module libs
for m in modules.keys():
	module_dir = p.join(build.titanium_source_dir, 'modules', modules[m])
	if not p.exists(module_dir):
		module_dir = p.join(build.kroll_source_dir, 'modules', modules[m])
	
	mlib = p.join('%s/%smodule.dll' % (build.dir, m))
	## we'll have to make this pluggable at some point
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.js' % m)
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.py' % m)
	if not p.exists(mlib):
		mlib = p.join(module_dir, '%smodule.rb' % m)
	
	out_dir = '%s/%s' % (modules_dir, m)
	os.makedirs(out_dir)
	
	if p.exists(mlib):
		shutil.copy(mlib, out_dir)
	
	app_resources = p.join(module_dir, 'AppResources')
	if p.exists(app_resources):
		dir_util.copy_tree(app_resources, p.join(modules_dir, m, 'AppResources'))

shutil.copy(kboot, p.join(app_dir, name + ".exe"))
dir_util.copy_tree(".", app_dir, preserve_symlinks=True)
out_file = open(p.join(app_dir, 'manifest'), 'w')
out_file.write(manifest_text)
out_file.close()

# Remove uneeded files
to_remove = []
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('SConscript')
		  or file.startswith('.')):
			os.remove(p.join(app_dir, walk[0], file))

# copy common
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(resources_dir,'js'), preserve_symlinks=True)

# copy the developer product
developer = p.join(app_dir,'developer')
os.makedirs(developer)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','developer'), developer, preserve_symlinks=True)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(developer,'resources','js'), preserve_symlinks=True)

# copy the app installer product
appinstaller = p.join(app_dir,'appinstaller')
os.makedirs(appinstaller)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','app_installer'), appinstaller, preserve_symlinks=True)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(appinstaller,'resources','js'), preserve_symlinks=True)

# copy the network installer
installer = p.join(app_dir,'installer')
os.makedirs(installer)
netinstaller = p.join(build.dir, 'net_installer')
shutil.copy(p.join(netinstaller,'Installer.exe'), installer)

for i in [developer,appinstaller]:
	# create a flag file on the netinstaller bundle so we don't
	# attempt to re-run the application installer	
	out_file = open(p.join(i, '.installed'), 'w')
	out_file.close()
			
			