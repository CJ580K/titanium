#!/usr/bin/env python

import os.path as p, shutil, os, zipfile
import glob, distutils.dir_util as dir_util
Import('vars')
Import(vars)

kboot = p.join(build.dir, 'kboot.exe')
self_extractor = p.join(build.dir, 'self_extractor.exe')
app_dir = p.join(build.dir, name)
runtime = p.join(app_dir,'runtime')
modules_dir = p.join(app_dir, 'modules')
resources_dir = p.join(app_dir,'Resources')

#third_party += ['libcurl']

if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

for d in [app_dir, runtime,modules_dir]:
	os.makedirs(d)

# Gather all runtime third-party libraries
for lib in runtime_libs:
	path = p.join(build.dir, lib+ '.dll')
	shutil.copy(path, runtime)

for tp in third_party:
	pattern = '%s\\%s\\bin\\*' % (build.third_party, tp)
	for d in glob.glob(pattern):
		if not p.isdir(d):
			shutil.copy(d, runtime)
		else:
			dir_util.copy_tree(d, runtime)

dir_util.copy_tree(p.join(build.third_party, 'microsoft', 'Microsoft.VC80.CRT'), p.join(app_dir, 'Microsoft.VC80.CRT'))
dir_util.copy_tree(p.join(build.third_party, 'microsoft', 'Microsoft.VC80.CRT'), p.join(runtime, 'Microsoft.VC80.CRT'))

# Gather all module libs
#for m in modules.keys():
	
#	module_dir = p.join(build.titanium_source_dir, 'modules', modules[m])
#	if not p.exists(module_dir):
#		module_dir = p.join(build.kroll_source_dir, 'modules', modules[m])
	
#	mlib = p.join('%s/%smodule.dll' % (build.dir, m))
	## we'll have to make this pluggable at some point
#	if not p.exists(mlib):
#		mlib = p.join(module_dir, '%smodule.js' % m)
#		print 'js mlib=%s' % mlib
#	if not p.exists(mlib):
#		mlib = p.join(module_dir, '%smodule.py' % m)
#	if not p.exists(mlib):
#		mlib = p.join(module_dir, '%smodule.rb' % m)
		
#	if p.exists(mlib):
#		print "Found module: %s" % mlib
#		out_dir = '%s/%s' % (modules_dir, m)
#		os.makedirs(out_dir)
#		shutil.copy(mlib, out_dir)
		
	
#	app_resources = p.join(module_dir, 'AppResources')
#	if p.exists(app_resources):
#		dir_util.copy_tree(app_resources, p.join(modules_dir, m, 'AppResources'))

#	os_module_resources = p.join(module_dir, 'Resources', build.os)
#	all_module_resources = p.join(module_dir, 'Resources', 'all')
#	if p.exists(os_module_resources):
#		dir_util.copy_tree(os_module_resources, p.join(modules_dir, m))
#	if p.exists(all_module_resources):
#		dir_util.copy_tree(all_module_resources, p.join(modules_dir, m))

#	module_manifest = p.join(module_dir, 'manifest')
#	if p.exists(module_manifest):
#		shutil.copy(module_manifest, out_dir)

dir_util.copy_tree(p.join(build.dir, 'modules'), modules_dir, preserve_symlinks=True)
print 'copying self extractor..'
appexe =  p.join(build.dir, name + ".exe")
shutil.copy(self_extractor, appexe)
shutil.copy("tiapp.xml", app_dir)

if p.exists("win32"):
	dir_util.copy_tree("win32", app_dir, preserve_symlinks=True)
dir_util.copy_tree("Resources", resources_dir, preserve_symlinks=True)


shutil.copy(p.join(build.titanium_source_dir,'installation','runtime','manifest'), p.join(app_dir,'manifest'))
shutil.copy(p.join(build.titanium_source_dir,'installation','runtime','install'), p.join(app_dir,'install'))

# Remove un-needed files
to_remove = []
files = os.walk(app_dir)
for walk in os.walk(app_dir):
	for file in walk[2]:
		if (file.endswith('.h')
		  or file.endswith('.defs')
		  or file.startswith('SConscript')
		  or file.startswith('.')):
			os.remove(p.join(app_dir, walk[0], file))

# copy common
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(resources_dir,'js'), preserve_symlinks=True)

# copy the developer product
developer = p.join(app_dir,'developer')
os.makedirs(developer)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','developer'), developer, preserve_symlinks=True)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(developer,'resources','js'), preserve_symlinks=True)

# copy the app installer product
appinstaller = p.join(app_dir,'appinstaller')
os.makedirs(appinstaller)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','app_installer'), appinstaller, preserve_symlinks=True)
dir_util.copy_tree(p.join(build.titanium_source_dir,'installation','common','js'), p.join(appinstaller,'resources','js'), preserve_symlinks=True)

# copy the network installer
installer = p.join(app_dir,'installer')
os.makedirs(installer)
netinstaller = p.join(build.dir, 'net_installer')
shutil.copy(p.join(netinstaller,'Installer.exe'), installer)

for i in [developer,appinstaller,app_dir]:
	# create a flag file on the netinstaller bundle so we don't
	# attempt to re-run the application installer	
	out_file = open(p.join(i, '.installed'), 'w')
	out_file.close()

## is this necessary ??			
#shutil.copy(p.join(build.kroll_third_party,'manifest'),p.join(app_dir,'runtime','manifest'))
		
# now for the fun part... build the self-extracting archive
shutil.copy(kboot, p.join(app_dir,'installer.exe'))
if not ARGUMENTS.get('skipzip', 0):
	zff = p.join(build.dir,'titanium_runtime.zip')
	exe = p.join(build.dir,'titanium_runtime.exe')
	zf = zipfile.ZipFile(exe,'a', zipfile.ZIP_DEFLATED)
	zf.write(p.join(build.dir,'kboot.exe'),'template/kboot.exe')
	files = os.walk(app_dir)
	for walk in os.walk(app_dir):
		for file in walk[2]:
			file = p.join(walk[0], file)
			arcname = file.replace(app_dir + '\\', "")
			#print "Writing %s into archive: %s" % (file, arcname)
			zf.write(file, arcname)
	zf.close()


