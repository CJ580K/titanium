require 'fileutils'
require 'zip/zip'
require '../../../build.rb'
require 'yaml'
require 'erb'

GEARS_REPO = 'git://github.com/marshall/gears-titanium.git'

task :default => [:link_src,:build,:gather]
task :production => [:get_src,:build,:gather]

task :link_src do
  if ENV['GEARS_TITANIUM']
    if not File.directory? 'gears_titanium'
      system 'ln -s ' + ENV['GEARS_TITANIUM'] + ' gears_titanium'
    end
    FileUtils.cd 'gears_titanium'
  else
    STDERR.puts 'Error: GEARS_TITANIUM environment variable not set'
    exit -1
  end
end

task :get_src do
  if not File.directory? 'gears_titanium'
    system "git clone #{GEARS_REPO} gears_titanium"
  	FileUtils.cd 'gears_titanium'
  else
    FileUtils.cd 'gears_titanium'
    system 'git pull'
  end
end

def get_make_command
	if is_mac?
		args = "BROWSER=SF MODE=opt"
		return "make #{args} || make #{args}"
	elsif is_win?
		if is_cygwin?
			return "cmd /C build.bat"
		else
			return "build.bat"
		end
	end
end

task :build do
	FileUtils.cd 'gears'

	puts get_make_command()	
	system get_make_command()
	FileUtils.cd File.join(PLUGINS_DIR, 'gears')
end

def bundle_plugin_mac(zipfile)
  basedir = File.join('gears_titanium', 'gears', 'bin-opt', 'installers', 'Safari', 'Gears.plugin')

	dirname = File.basename(basedir)
	zipfile.mkdir(dirname)
   
	dofiles(basedir) do |f|
		filename = f.to_s
		zipfile.add(File.join(dirname, filename), File.join(basedir, filename))
	end
end

def bundle_plugin_win(zipfile)
	zipfile.add('gears_titanium.dll', File.join('gears_titanium', 'gears', 'bin-opt', 'win32-i386', 'npapi', 'gears_titanium.dll'))
end


def create_zip(plugin_name, version, embed_folder=true)
	filename = "tiplugin_#{plugin_name}_#{version}"
  filename += "_" + platform_string

  path = File.join STAGE_DIR, "#{filename}.zip"
  if File.exists?(path)
    FileUtils.rm path
  end
  
  FileUtils.mkdir_p STAGE_DIR
  Zip::ZipFile.open(path, Zip::ZipFile::CREATE) {
   |zipfile|
 
		if is_mac? 
			bundle_plugin_mac(zipfile)
		elsif is_win?
			bundle_plugin_win(zipfile)
		end
   
    yield zipfile
  }
  
  puts "Created zipfile: #{path}"
end

task :gather do
	template = nil
	File.open('build.yml') { |f| template = ERB.new(f.read()) }

	build_yml = template.result(binding)
	build = YAML::load(build_yml)
	

	create_zip('gears', build[:version]) do |zipfile|
		zipfile.get_output_stream('build.yml') { |f| f.write(build_yml) }
		zipfile.add('plugin.rb', 'plugin.rb')
		zipfile.add('plugin.js', 'plugin.js')
		zipfile.add('gears_init.js', File.join('gears_titanium', 'gears', 'sdk', 'gears_init.js'))
	end
end
