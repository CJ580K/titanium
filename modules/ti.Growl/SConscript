#!/usr/bin/env python
import os, inspect, os.path as path, shutil
import distutils.dir_util as dirutil

Import('build')

env = build.env.Clone();
env.Append(CPPDEFINES = ('TITANIUM_GROWL_API_EXPORT', 1))
env.Append(CPPPATH = ['#kroll'])
build.add_thirdparty(env, 'poco')

sources = Glob('*.cpp')

if build.is_osx():
	OSX_SDK = '/Developer/SDKs/MacOSX10.4u.sdk'
	OSX_UNIV_COMPILER = '-isysroot '+OSX_SDK+' -arch ppc -arch i386'
	OSX_UNIV_LINKER = '-isysroot '+OSX_SDK+' -syslibroot,'+OSX_SDK
	env.Append(FRAMEWORKPATH = [build.third_party+'/growl'])
	env.Append(CPPPATH = [build.third_party+'/growl/Growl.framework/Headers', build.third_party +'/poco/headers'])
	env.Append(FRAMEWORKS = ['Cocoa', 'Growl'])
	env.Append(CCFLAGS = ['-x', 'objective-c++'])
	env.Append(CCFLAGS=OSX_UNIV_COMPILER)
	env.Append(LDFLAGS=OSX_UNIV_LINKER)
	env.Append(LIBS = ['dl'])
	sources += Glob(build.os + '/*.mm')
	sources += Glob('%s/*.cpp' % build.os)

elif build.is_win32():
	env.Append(LIBS = ['user32', 'shell32', 'advapi32'])
	sources += Glob('%s/*.cpp' % build.os)

elif build.is_linux():
	sources += Glob('libnotify/*.cpp')
	env.ParseConfig('pkg-config --cflags --libs libnotify')

s = env.SharedLibrary(target = build.dir + '/tigrowlmodule', source=sources)


#dirutil.mkpath(build.dir+'/modules/ti.Growl/Resources')
#cwd = path.dirname(inspect.currentframe().f_code.co_filename)

#if build.is_osx():
#	dirutil.mkpath(build.dir+'/modules.ti.Growl/Growl.framework')
#	shutil.copy(cwd+'/Resources/osx/Growl Registration Ticket.growlRegDict', build.dir+'/modules/ti.Growl/Resources')
#	dirutil.copy_tree(build.third_party+'/growl/Growl.framework', build.dir+'/modules/ti.Growl/Resources/Growl.framework', update=1)
