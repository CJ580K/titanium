#!/usr/bin/env python

import os.path as p, os 
import glob, distutils.dir_util as dir_util
Import('build')

shortname = 'titanium_testapp'
fullname = 'Titanium Test App'
id = 'com.titaniumapp.testapp'
version = '0.1'

if build.is_linux():
	app_dir = p.join(build.dir, shortname)
	exe_path = p.join(app_dir, shortname)
	kboot = p.join(build.dir, 'kboot')
elif build.is_win32():
	app_dir = p.join(build.dir, shortname)
	exe_path = p.join(app_dir, shortname+'.exe')
	kboot = p.join(build.dir, 'kboot.exe')
elif build.is_osx():
	app_dir = p.join(build.dir, shortname+'.app', 'Contents')
	exe_path = p.join(build.dir, shortname+'.app', 'MacOS')
	exe_path = p.join(app_dir, shortname+'.exe')
	kboot = p.join(build.dir, 'kboot')
else:
	print "Sorry, the testapp builder does not support your environment yet."
	Exit()

runtime = p.join(app_dir, 'runtime');
rsc_dir = p.join(app_dir, 'Resources');


if p.isdir(app_dir):
	dir_util.remove_tree(app_dir)

build.utils.CopyToDir(build.dir + '/runtime', app_dir)
build.utils.CopyToDir(p.join(build.dir, 'modules'), app_dir,
	exclude=['.dll.manifest', '.dll.pdb', '.exp', '.ilk'])
build.utils.Touch(p.join(app_dir, '.installed')) # prevent appinstaller run
build.utils.Copy(kboot, exe_path)

build.utils.CopyToDir('Resources', app_dir)
build.utils.CopyToDir('tiapp.xml', app_dir)
build.utils.CopyToDir('manifest', app_dir)

if build.is_osx():
	if 'tiui' in build.modules:
		build.utils.CopyToDir(
			p.join(build.modules['tiui'].build_dir, 'MainMenu.nib'),
			p.join(rsc_dir, 'English.lproj'))
	build.utils.CopyToDir(p.join(build.titanium_support_dir, 'titanium.icns'), rsc_dir)

	plist = p.join(app_dir, 'Info.plist')
	build.utils.Copy(p.join(build.titanium_support_dir, 'Info.plist'), plist)
	build.utils.ReplaceVars(plist, {
		'APPEXE': shortname,
		'APPNAME': fullname,
		'APPICON': 'titanium.icns',
		'APPID': id,
		'APPNIB': 'MainMenu',
		'APPVER': version})

