/*
 * WARNING this file was generated by Appcelerator's idl2npapi
 */

#include "ISciMoz.h"

#include "npSupport.h"
#include "ISciMozController_np.h"
#include "ISciMozController.h"

static void ISciMozController_initializeIdentifiers(void)
{
    NPN_GetStringIdentifiers(_ISciMozController_pluginPropertyIdentifierNames, _ISciMozController_NumberOfProperties, _ISciMozController_pluginPropertyIdentifiers);
    NPN_GetStringIdentifiers(_ISciMozController_pluginMethodIdentifierNames, _ISciMozController_NumberOfMethods, _ISciMozController_pluginMethodIdentifiers);
}

bool ISciMozController_identifiersInitialized = false;

bool ISciMozController_pluginInvokeDefault(NPObject *obj, const NPVariant *args, uint32_t argCount, NPVariant *result)
{
    return false;
}

void ISciMozController_pluginInvalidate(NPObject *obj)
{
    // Release any remaining references to JavaScript objects.
}

extern ISciMozController* Create_ISciMozController();

NPObject *ISciMozController_pluginAllocate(NPP npp, NPClass *theClass)
{
    ISciMozController *newInstance = Create_ISciMozController();

    if (!ISciMozController_identifiersInitialized) {
        ISciMozController_identifiersInitialized = true;
        ISciMozController_initializeIdentifiers();
    }

    return newInstance;
}

void ISciMozController_pluginDeallocate(NPObject *obj)
{
    free(obj);
}

bool ISciMozController_pluginRemoveProperty (NPObject *npobj, NPIdentifier name) {
  return false;
}

bool ISciMozController_pluginEnumerate (NPObject *npobj, NPIdentifier **value, uint32_t *count) {
  *count = _ISciMozController_NumberOfProperties + _ISciMozController_NumberOfMethods;

  value = (NPIdentifier**) malloc(sizeof(NPIdentifier*) * (*count));
  int i = 0, index = 0;

  for (i = 0; i < _ISciMozController_NumberOfProperties; i++, index++) value[index] = &_ISciMozController_pluginPropertyIdentifiers[i];
  for (i = 0; i < _ISciMozController_NumberOfMethods; i++, index++) value[index] = &_ISciMozController_pluginMethodIdentifiers[i];

  return true;
}

bool ISciMozController_pluginHasProperty(NPObject *obj, NPIdentifier name)
{
    int i;
    for (i = 0; i < _ISciMozController_NumberOfProperties; i++)
        if (name ==  _ISciMozController_pluginPropertyIdentifiers[i])
            return true;
    return false;
}

bool ISciMozController_pluginHasMethod(NPObject *obj, NPIdentifier name)
{
    int i;
    for (i = 0; i <  _ISciMozController_NumberOfMethods; i++)
        if (name ==  _ISciMozController_pluginMethodIdentifiers[i])
            return true;
    return false;
}


bool ISciMozController_pluginGetProperty(NPObject *obj, NPIdentifier name, NPVariant *variant) {
	ISciMozController *instance = (ISciMozController *) obj;
	
	
	return false;
}

bool ISciMozController_pluginSetProperty(NPObject *obj, NPIdentifier name, NPVariant *variant) {
	ISciMozController *instance = (ISciMozController *) obj;
	
	
	return false;
}


bool ISciMozController_pluginInvoke(NPObject *obj, NPIdentifier name, const NPVariant *args, uint32_t argCount, NPVariant *result) {
	ISciMozController *instance = (ISciMozController *) obj;
	
	if (name == _ISciMozController_pluginMethodIdentifiers[_ISciMozController_init]) {
		instance->init((ISciMoz*)NPVARIANT_TO_OBJECT(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciMozController_pluginMethodIdentifiers[_ISciMozController_test_scimoz]) {
		instance->test_scimoz((ISciMoz*)NPVARIANT_TO_OBJECT(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	
	return false;
}