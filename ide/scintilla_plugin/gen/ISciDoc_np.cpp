/*
 * WARNING this file was generated by Appcelerator's idl2npapi
 */


#include "npSupport.h"
#include "ISciDoc_np.h"
#include "ISciDoc.h"

static void ISciDoc_initializeIdentifiers(void)
{
    NPN_GetStringIdentifiers(_ISciDoc_pluginPropertyIdentifierNames, _ISciDoc_NumberOfProperties, _ISciDoc_pluginPropertyIdentifiers);
    NPN_GetStringIdentifiers(_ISciDoc_pluginMethodIdentifierNames, _ISciDoc_NumberOfMethods, _ISciDoc_pluginMethodIdentifiers);
}

bool ISciDoc_identifiersInitialized = false;

bool ISciDoc_pluginInvokeDefault(NPObject *obj, const NPVariant *args, uint32_t argCount, NPVariant *result)
{
    return false;
}

void ISciDoc_pluginInvalidate(NPObject *obj)
{
    // Release any remaining references to JavaScript objects.
}

extern ISciDoc* Create_ISciDoc();

NPObject *ISciDoc_pluginAllocate(NPP npp, NPClass *theClass)
{
    ISciDoc *newInstance = Create_ISciDoc();

    if (!ISciDoc_identifiersInitialized) {
        ISciDoc_identifiersInitialized = true;
        ISciDoc_initializeIdentifiers();
    }

    return newInstance;
}

void ISciDoc_pluginDeallocate(NPObject *obj)
{
    free(obj);
}

bool ISciDoc_pluginRemoveProperty (NPObject *npobj, NPIdentifier name) {
  return false;
}

bool ISciDoc_pluginEnumerate (NPObject *npobj, NPIdentifier **value, uint32_t *count) {
  *count = _ISciDoc_NumberOfProperties + _ISciDoc_NumberOfMethods;

  value = (NPIdentifier**) malloc(sizeof(NPIdentifier*) * (*count));
  int i = 0, index = 0;

  for (i = 0; i < _ISciDoc_NumberOfProperties; i++, index++) value[index] = &_ISciDoc_pluginPropertyIdentifiers[i];
  for (i = 0; i < _ISciDoc_NumberOfMethods; i++, index++) value[index] = &_ISciDoc_pluginMethodIdentifiers[i];

  return true;
}

bool ISciDoc_pluginHasProperty(NPObject *obj, NPIdentifier name)
{
    int i;
    for (i = 0; i < _ISciDoc_NumberOfProperties; i++)
        if (name ==  _ISciDoc_pluginPropertyIdentifiers[i])
            return true;
    return false;
}

bool ISciDoc_pluginHasMethod(NPObject *obj, NPIdentifier name)
{
    int i;
    for (i = 0; i <  _ISciDoc_NumberOfMethods; i++)
        if (name ==  _ISciDoc_pluginMethodIdentifiers[i])
            return true;
    return false;
}


bool ISciDoc_pluginGetProperty(NPObject *obj, NPIdentifier name, NPVariant *variant) {
	ISciDoc *instance = (ISciDoc *) obj;
	
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_docPointer]) {
		INT32_TO_NPVARIANT(instance->GetDocPointer(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_stylingBits]) {
		INT32_TO_NPVARIANT(instance->GetStylingBits(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_stylingBitsMask]) {
		INT32_TO_NPVARIANT(instance->GetStylingBitsMask(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_eolMode]) {
		INT32_TO_NPVARIANT(instance->GetEolMode(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_dbcsCodePage]) {
		INT32_TO_NPVARIANT(instance->GetDbcsCodePage(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_tabInChars]) {
		INT32_TO_NPVARIANT(instance->GetTabInChars(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_indentInChars]) {
		INT32_TO_NPVARIANT(instance->GetIndentInChars(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_actualIndentInChars]) {
		INT32_TO_NPVARIANT(instance->GetActualIndentInChars(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_useTabs]) {
		BOOLEAN_TO_NPVARIANT(instance->GetUseTabs(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_tabIndents]) {
		BOOLEAN_TO_NPVARIANT(instance->GetTabIndents(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_backspaceUnindents]) {
		BOOLEAN_TO_NPVARIANT(instance->GetBackspaceUnindents(), *variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_text]) {
		STRINGZ_TO_NPVARIANT(instance->GetText().c_str(), *variant);
		return true;
	}
	
	return false;
}

bool ISciDoc_pluginSetProperty(NPObject *obj, NPIdentifier name, NPVariant *variant) {
	ISciDoc *instance = (ISciDoc *) obj;
	
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_docPointer]) {
		instance->SetDocPointer(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_stylingBits]) {
		instance->SetStylingBits(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_stylingBitsMask]) {
		instance->SetStylingBitsMask(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_eolMode]) {
		instance->SetEolMode(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_dbcsCodePage]) {
		instance->SetDbcsCodePage(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_tabInChars]) {
		instance->SetTabInChars(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_indentInChars]) {
		instance->SetIndentInChars(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_actualIndentInChars]) {
		instance->SetActualIndentInChars(NPVARIANT_TO_INT32(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_useTabs]) {
		instance->SetUseTabs(NPVARIANT_TO_BOOLEAN(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_tabIndents]) {
		instance->SetTabIndents(NPVARIANT_TO_BOOLEAN(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_backspaceUnindents]) {
		instance->SetBackspaceUnindents(NPVARIANT_TO_BOOLEAN(*variant));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	if (name == _ISciDoc_pluginPropertyIdentifiers[_ISciDoc_text]) {
		instance->SetText(NPStringToString(NPVARIANT_TO_STRING(*variant)));
		VOID_TO_NPVARIANT(*variant);
		return true;
	}
	
	return false;
}


bool ISciDoc_pluginInvoke(NPObject *obj, NPIdentifier name, const NPVariant *args, uint32_t argCount, NPVariant *result) {
	ISciDoc *instance = (ISciDoc *) obj;
	
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LineFromPosition]) {
		int32 returnval = instance->LineFromPosition(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ClampPositionIntoDocument]) {
		int32 returnval = instance->ClampPositionIntoDocument(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsCrLf]) {
		bool returnval = instance->IsCrLf(NPVARIANT_TO_INT32(args[0]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LenChar]) {
		int32 returnval = instance->LenChar(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_MovePositionOutsideChar]) {
		int32 returnval = instance->MovePositionOutsideChar(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_BOOLEAN(args[2]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ModifiedAt]) {
		instance->ModifiedAt(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DeleteChars]) {
		bool returnval = instance->DeleteChars(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_InsertString]) {
		bool returnval = instance->InsertString(NPVARIANT_TO_INT32(args[0]),NPStringToString(NPVARIANT_TO_STRING(args[1])));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_Undo]) {
		int32 returnval = instance->Undo();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_Redo]) {
		int32 returnval = instance->Redo();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_CanUndo]) {
		bool returnval = instance->CanUndo();
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_CanRedo]) {
		bool returnval = instance->CanRedo();
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DeleteUndoHistory]) {
		instance->DeleteUndoHistory();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetUndoCollection]) {
		bool returnval = instance->SetUndoCollection(NPVARIANT_TO_BOOLEAN(args[0]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsCollectingUndo]) {
		bool returnval = instance->IsCollectingUndo();
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_BeginUndoAction]) {
		instance->BeginUndoAction();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_EndUndoAction]) {
		instance->EndUndoAction();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetSavePoint]) {
		instance->SetSavePoint();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsSavePoint]) {
		bool returnval = instance->IsSavePoint();
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetLineIndentation]) {
		int32 returnval = instance->GetLineIndentation(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetLineIndentation]) {
		instance->SetLineIndentation(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetLineIndentPosition]) {
		int32 returnval = instance->GetLineIndentPosition(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetColumn]) {
		int32 returnval = instance->GetColumn(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_FindColumn]) {
		int32 returnval = instance->FindColumn(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_Indent]) {
		instance->Indent(NPVARIANT_TO_BOOLEAN(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_INT32(args[2]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_TransformLineEnds]) {
		std::string returnval = instance->TransformLineEnds(NPStringToString(NPVARIANT_TO_STRING(args[0])),NPVARIANT_TO_INT32(args[1]));
		STRINGZ_TO_NPVARIANT(returnval.c_str(), *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ConvertLineEnds]) {
		instance->ConvertLineEnds(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetReadOnly]) {
		instance->SetReadOnly(NPVARIANT_TO_BOOLEAN(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsReadOnly]) {
		bool returnval = instance->IsReadOnly();
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_InsertChar]) {
		bool returnval = instance->InsertChar(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ChangeChar]) {
		instance->ChangeChar(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DelChar]) {
		instance->DelChar(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DelCharBack]) {
		instance->DelCharBack(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_CharAt]) {
		char returnval = instance->CharAt(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetCharRange]) {
		std::string returnval = instance->GetCharRange(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		STRINGZ_TO_NPVARIANT(returnval.c_str(), *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_StyleAt]) {
		char returnval = instance->StyleAt(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetMark]) {
		int32 returnval = instance->GetMark(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_AddMark]) {
		int32 returnval = instance->AddMark(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_AddMarkSet]) {
		instance->AddMarkSet(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DeleteMark]) {
		instance->DeleteMark(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DeleteMarkFromHandle]) {
		instance->DeleteMarkFromHandle(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DeleteAllMarks]) {
		instance->DeleteAllMarks(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LineFromHandle]) {
		int32 returnval = instance->LineFromHandle(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LineStart]) {
		int32 returnval = instance->LineStart(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LineEnd]) {
		int32 returnval = instance->LineEnd(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LineEndPosition]) {
		int32 returnval = instance->LineEndPosition(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_VCHomePosition]) {
		int32 returnval = instance->VCHomePosition(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetLevel]) {
		int32 returnval = instance->SetLevel(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetLevel]) {
		int32 returnval = instance->GetLevel(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ClearLevels]) {
		instance->ClearLevels();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetLastChild]) {
		int32 returnval = instance->GetLastChild(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetFoldParent]) {
		int32 returnval = instance->GetFoldParent(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ExtendWordSelect]) {
		int32 returnval = instance->ExtendWordSelect(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_BOOLEAN(args[2]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_NextWordStart]) {
		int32 returnval = instance->NextWordStart(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_NextWordEnd]) {
		int32 returnval = instance->NextWordEnd(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_Length]) {
		int32 returnval = instance->Length();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_Allocate]) {
		instance->Allocate(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_FindText]) {
		int32 returnval = instance->FindText(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPStringToString(NPVARIANT_TO_STRING(args[2])),NPVARIANT_TO_BOOLEAN(args[3]),NPVARIANT_TO_BOOLEAN(args[4]),NPVARIANT_TO_BOOLEAN(args[5]),NPVARIANT_TO_BOOLEAN(args[6]),NPVARIANT_TO_BOOLEAN(args[7]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SubstituteByPosition]) {
		std::string returnval = instance->SubstituteByPosition(NPStringToString(NPVARIANT_TO_STRING(args[0])));
		STRINGZ_TO_NPVARIANT(returnval.c_str(), *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_LinesTotal]) {
		int32 returnval = instance->LinesTotal();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ChangeCase]) {
		instance->ChangeCase(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_BOOLEAN(args[2]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetDefaultCharClasses]) {
		instance->SetDefaultCharClasses(NPVARIANT_TO_BOOLEAN(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_StartStyling]) {
		instance->StartStyling(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetStyleFor]) {
		bool returnval = instance->SetStyleFor(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetStyles]) {
		bool returnval = instance->SetStyles(NPVARIANT_TO_INT32(args[0]),NPStringToString(NPVARIANT_TO_STRING(args[1])));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetEndStyled]) {
		int32 returnval = instance->GetEndStyled();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_EnsureStyledTo]) {
		instance->EnsureStyledTo(NPVARIANT_TO_INT32(args[0]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetStyleClock]) {
		int32 returnval = instance->GetStyleClock();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IncrementStyleClock]) {
		instance->IncrementStyleClock();
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_DecorationFillRange]) {
		instance->DecorationFillRange(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_INT32(args[2]));
		VOID_TO_NPVARIANT(*result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_SetLineState]) {
		int32 returnval = instance->SetLineState(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetLineState]) {
		int32 returnval = instance->GetLineState(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_GetMaxLineState]) {
		int32 returnval = instance->GetMaxLineState();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsWordPartSeparator]) {
		bool returnval = instance->IsWordPartSeparator(NPVARIANT_TO_INT32(args[0]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_WordPartLeft]) {
		int32 returnval = instance->WordPartLeft(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_WordPartRight]) {
		int32 returnval = instance->WordPartRight(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ExtendStyleRange]) {
		int32 returnval = instance->ExtendStyleRange(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]),NPVARIANT_TO_BOOLEAN(args[2]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IsWhiteLine]) {
		bool returnval = instance->IsWhiteLine(NPVARIANT_TO_INT32(args[0]));
		BOOLEAN_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ParaUp]) {
		int32 returnval = instance->ParaUp(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_ParaDown]) {
		int32 returnval = instance->ParaDown(NPVARIANT_TO_INT32(args[0]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_IndentSize]) {
		int32 returnval = instance->IndentSize();
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	if (name == _ISciDoc_pluginMethodIdentifiers[_ISciDoc_BraceMatch]) {
		int32 returnval = instance->BraceMatch(NPVARIANT_TO_INT32(args[0]),NPVARIANT_TO_INT32(args[1]));
		INT32_TO_NPVARIANT(returnval, *result);
		
		return true;
	}
	
	return false;
}